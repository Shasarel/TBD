// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TBD;

namespace TBD.Migrations
{
    [DbContext(typeof(TBDDbContext))]
    [Migration("20210118180139_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("TBD.DbModels.BlindSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Device")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HourType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeOffset")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlindSchedule");
                });

            modelBuilder.Entity("TBD.DbModels.BlindTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BlindsScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DateTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Timestamp");

                    b.Property<int>("Device")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Timeout")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BlindsScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("BlindTask");
                });

            modelBuilder.Entity("TBD.DbModels.DailyElectricitySummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Date")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyExport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyExportSum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyImport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyImportSum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyProduction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyProductionSum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPowerConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPowerExport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPowerImport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPowerProduction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPowerStore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPowerUse")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DailyElectricitySummary");
                });

            modelBuilder.Entity("TBD.DbModels.DailyMeteoSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Date")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM100Avg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM100Max")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM100Min")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM10Avg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM10Max")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM10Min")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM25Avg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM25Max")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM25Min")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HumidityAvg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HumidityMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HumidityMin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDataCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PressureAvg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PressureMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PressureMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TemperatureAvg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TemperatureMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TemperatureMin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DailyMeteoSummary");
                });

            modelBuilder.Entity("TBD.DbModels.ElectricityMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DateTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Timestamp");

                    b.Property<int>("EnergyExport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyImport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyProduction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerExport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerImport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerProduction")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ElectricityMeasurement");
                });

            modelBuilder.Entity("TBD.DbModels.EnergyCorrection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Correction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Date")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EnergyCorrection");
                });

            modelBuilder.Entity("TBD.DbModels.MeteoMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DateTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Timestamp");

                    b.Property<int>("DustPM10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM100")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DustPM25")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Humidity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pressure")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Temperature")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MeteoMeasurement");
                });

            modelBuilder.Entity("TBD.DbModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TBD.DbModels.BlindSchedule", b =>
                {
                    b.HasOne("TBD.DbModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBD.DbModels.BlindTask", b =>
                {
                    b.HasOne("TBD.DbModels.BlindSchedule", "BlindsSchedule")
                        .WithMany()
                        .HasForeignKey("BlindsScheduleId");

                    b.HasOne("TBD.DbModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BlindsSchedule");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
